name: Build and push image

on:
  push:
    paths:
      - '*.yaml'
      - '.github/workflows/build.yml'
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * *'

jobs:
  nvidia-kmod:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      kernelver: ${{ steps.kernelver.outputs.kernelver }}
      nvidiaver: ${{ steps.kernelver.outputs.nvidiaver }}
    container:
      image: registry.fedoraproject.org/fedora:${{ vars.RELEASEVER }}
      options: --privileged

    steps:
      - name: Get latest kernel and nvidia version
        id: kernelver
        run: |
          echo "kernelver=$(dnf -q --refresh rq kernel --latest-limit=1 --qf '%{VERSION}-%{RELEASE}.%{ARCH}')" >> $GITHUB_OUTPUT
          echo "nvidiaver=$(dnf -q --repofrompath='rpmfusion,https://download1.rpmfusion.org/nonfree/fedora/releases/$releasever/Everything/$basearch/os/' \
                          --repo=rpmfusion rq xorg-x11-drv-nvidia --latest-limit=1 --qf '%{VERSION}-%{RELEASE}.%{ARCH}')" >> $GITHUB_OUTPUT

      - name: Check if kmod is up to date
        uses: actions/cache/restore@v4
        id: repocache
        with:
          lookup-only: true
          path: nvidia-kmod-repo
          key: nvidia-kmod-repo-${{ steps.kernelver.outputs.kernelver }}-${{ steps.kernelver.outputs.nvidiaver }}

      - name: Prepare
        if: steps.repocache.outputs.cache-hit != 'true'
        run: |
          dnf -y up && dnf -y install \
            gnupg2 \
            rpm-sign \
            createrepo_c \
            distribution-gpg-keys \
            git-core \
            kernel-${{ steps.kernelver.outputs.kernelver }} \
            kernel-devel-${{ steps.kernelver.outputs.kernelver }}
          rpm --import /usr/share/distribution-gpg-keys/rpmfusion/RPM-GPG-KEY-rpmfusion-free-fedora-$(rpm -E %fedora)
          rpm --import /usr/share/distribution-gpg-keys/rpmfusion/RPM-GPG-KEY-rpmfusion-nonfree-fedora-$(rpm -E %fedora)
          dnf -y --setopt=localpkg_gpgcheck=1 install https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm \
            https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm

          cat << EOF > ~/.rpmmacros
          %_signature gpg
          %_gpg_name ${{ github.repository_owner }}
          %_gpgbin /usr/bin/gpg2
          EOF

      - name: Checkout
        if: steps.repocache.outputs.cache-hit != 'true'
        uses: actions/checkout@v4

      - name: Keys
        if: steps.repocache.outputs.cache-hit != 'true'
        env:
          KMOD_SIGN_KEY: ${{ secrets.KMOD_SIGN_KEY }}
          GPGKEY: ${{ secrets.GPGKEY }}
        run: |
          echo "$KMOD_SIGN_KEY" | install -Dm0644 /dev/stdin /etc/pki/akmods/private/private_key.priv
          install -Dm0644 public_key.der /etc/pki/akmods/certs/public_key.der
          echo "$GPGKEY" > ${{ github.repository_owner }}.private
          gpg --import ${{ github.repository_owner }}.private

      - name: Build kmod-nvidia
        if: steps.repocache.outputs.cache-hit != 'true'
        run: |
          dnf -y in --setopt=install_weak_deps=0 akmod-nvidia-${{ steps.kernelver.outputs.nvidiaver }}
          akmods --force --kernel "${{ steps.kernelver.outputs.kernelver }}"
          modinfo /usr/lib/modules/"${{ steps.kernelver.outputs.kernelver }}"/extra/nvidia/nvidia{,-drm,-modeset,-peermem,-uvm}.ko > /dev/null || \
            (cat /var/cache/akmods/nvidia/*-for-*.log && exit 1)
          mkdir nvidia-kmod-repo
          cp /var/cache/akmods/nvidia/*.rpm nvidia-kmod-repo

      - name: Sign
        if: steps.repocache.outputs.cache-hit != 'true'
        run: |
          rpm --addsign ./nvidia-kmod-repo/*.rpm

      - name: Create repo
        if: steps.repocache.outputs.cache-hit != 'true'
        run: |
          pushd nvidia-kmod-repo
          createrepo_c .

      - name: Save repo
        if: steps.repocache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: nvidia-kmod-repo
          key: nvidia-kmod-repo-${{ steps.kernelver.outputs.kernelver }}-${{ steps.kernelver.outputs.nvidiaver }}

  openh264:
    uses: ./.github/workflows/build-rpm.yaml
    secrets:
      gpgkey: ${{ secrets.GPGKEY }}
    with:
      package: openh264


  main:
    needs: [nvidia-kmod, openh264]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    container:
      image: registry.fedoraproject.org/fedora:${{ vars.RELEASEVER }}
      options: --privileged --volume /:/run/host:rw
    env:
      IMAGENAME: ghcr.io/${{ github.repository }}/kde-unstable-atomic
      SKOPEO_ARGS: "--sign-by-sigstore-private-key ${{ github.repository_owner }}.private --sign-passphrase-file ${{ github.repository_owner }}.passphrase --retry-times 3 --dest-compress-format zstd"

    steps:
      - name: Reclaim disk space
        run: |
          rm -rf /run/host/usr/local/lib/android /run/host/usr/share/dotnet /run/host/opt/ghc /run/host/opt/hostedtoolcac

      - name: Prepare
        run: |
          dnf -y up && dnf -y install \
            bsdtar \
            buildah \
            dbus-daemon \
            distribution-gpg-keys \
            file \
            git-core \
            jq \
            ostree \
            podman \
            rpm-ostree \
            selinux-policy-targeted \
            skopeo \
            tar \
            zstd
          cat << EOF > /etc/containers/registries.d/sigstore.yaml
          docker:
            $IMAGENAME:
              use-sigstore-attachments: true
          EOF
          cp /usr/share/distribution-gpg-keys/rpmfusion/RPM-GPG-KEY-rpmfusion-free-fedora-$(rpm -E %fedora) /etc/pki/rpm-gpg/
          cp /usr/share/distribution-gpg-keys/rpmfusion/RPM-GPG-KEY-rpmfusion-nonfree-fedora-$(rpm -E %fedora) /etc/pki/rpm-gpg/
          dnf clean all

      - uses: actions/checkout@v4

      - name: Get buildid
        id: get-buildid
        run: |
          echo "buildid=$(date -u "+%Y%m%d.%H%M")" >> $GITHUB_OUTPUT

      - name: Restore cache
        id: cache
        uses: actions/cache/restore@v4
        with:
          path: buildcache.tar.zst
          key: build-${{ steps.get-buildid.outputs.buildid }}
          restore-keys: build-

      - name: Download nvidia repo
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          path: nvidia-kmod-repo
          key: nvidia-kmod-repo-${{ needs.nvidia-kmod.outputs.kernelver }}-${{ needs.nvidia-kmod.outputs.nvidiaver }}

      - name: Download openh264 repo
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          path: openh264-repo
          key: openh264-repo

      - name: Specify repo path
        run: |
          sed -i "s|@@PATH@@|$(realpath nvidia-kmod-repo)|" nvidia.repo
          sed -i "s|@@PATH@@|$(realpath openh264-repo)|" openh264.repo

      - name: Build
        id: build
        run: |
          cp RPM-GPG-KEY-${{ github.repository_owner }} /etc/pki/rpm-gpg/
          if [[ -f "buildcache.tar.zst" ]]; then
            bsdtar --acls --xattrs -xpzf buildcache.tar.zst
            rm buildcache.tar.zst
          fi
          mkdir -p cache

          version="$(rpm-ostree compose tree --print-only kinoite.yaml | jq -r '."mutate-os-release"')"
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "Composing kinoite ${version}.${{ steps.get-buildid.outputs.buildid }} ..."

          rpm-ostree compose rootfs --cachedir=cache kinoite.yaml rootfs
          rpm-ostree compose build-chunked-oci --bootc --format-version=1 \
            --max-layers 99 --rootfs=rootfs \
            --output containers-storage:localhost/kinoite:build

      - name: Key
        env:
          SIGN_KEY: ${{ secrets.SIGN_KEY }}
          SIGN_PASSPHRASE: ${{ secrets.SIGN_PASSPHRASE }}
        run: |
          echo "$SIGN_KEY" > ${{ github.repository_owner }}.private
          echo "$SIGN_PASSPHRASE" > ${{ github.repository_owner }}.passphrase

      - name: Push
        run: |
          skopeo login --username "${{ github.repository_owner }}" --password "${{ secrets.GITHUB_TOKEN }}" ghcr.io

          skopeo copy ${SKOPEO_ARGS} \
            "containers-storage:localhost/kinoite:build" \
            "docker://${IMAGENAME}:${{ steps.build.outputs.version }}.${{ steps.get-buildid.outputs.buildid }}"

          skopeo copy ${SKOPEO_ARGS} \
            "docker://${IMAGENAME}:${{ steps.build.outputs.version }}.${{ steps.get-buildid.outputs.buildid }}" \
            "docker://${IMAGENAME}:${{ steps.build.outputs.version }}"

      - name: Compress the cache directory manually to preserve xattrs
        run: |
          bsdtar --zstd --options zstd:compression-level=16,zstd:threads=0 --acls --xattrs -cpaf buildcache.tar.zst cache

      - name: Save cache
        id: cache-save
        uses: actions/cache/save@v4
        with:
          path: buildcache.tar.zst
          key: ${{ steps.cache.outputs.cache-primary-key }}
